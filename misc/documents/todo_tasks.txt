=========
REMEMBER!
=========
Each time you change the logic / update NPM package version, do the following steps:
a. Perform a backup before any change has been made, by running on termine 'npm run backup' or manually to the backups directory.
b. After the change, check that everything works OK.
c. Keep the maintenance - Every change you do - Make sure to update in this document if needed.
d. Keep the backup update - Every change you do - Update in iOmega (each couple of days do backup there).
=================================

ToDo Tasks:
===========
-After register from all emails in KeyPass, add all SendGrid accounts to the JSON file.
-Fill in the accounts.json with real accounts from KeyPass.

Complete / Cancel Tasks:
========================
-Fix all spell mistakes in all misc TXT files. *
-Make a real test session with real emails (from folder with TXT files - Canceled. * from array). *
-Remove all the comments around the project. *
-Clean all 'debugger' codes. *
-Reformat all error numbers. *
-Add INSTRUCTIONS.md and README.md like in the crawler project. *
-Add LinkedIn, GitHub, StackOverFlow to all *.MD files. *
-Foramt all files. *
-Refactor all one instance class to module.export = new Class(); *
-Bring back from comments in emailAddress.configuration.js. *
-Add catch to all return promises. *
-Merge between pause and sleep function if exists. *
-Disable filter emails in DEVELOPMENT mode. *
-Clean the sandbox.text.js. *
-Do all the ToDo points. *
-Add to settings.js to real limit of SendGrid - 100, and change it in all places. *
-Fixed the confirmation service and implement it on send.logic.js. *
-Return the skip and the monitor logics from the settings.js back to true. *
-Verify confirmation service works. *
-Add document txt file of valid test email addresses (all my email addresses in KeePass) *
 to test real sending emails. Don't save them in the Mongo database. *
-Update packages. *
-Add log mode - Instead of the status console log, just log to the console the log result of each email one after another. *
-Tests: Build a test of sending single specific email (all fields editable). *
(validate that the file exists on the initiate step of the script). *
-Add flag for the logs if to log emails results or not. *
-Logs - Add flag for logs + Convert all the logs into 1 log file: *
FULL MESSAGE: *
============ *
Time: 15:05:43 | Code: 200 | Status: SENT/ERROR/EXISTS/DUPLICATE/FILTER/SKIP/INVALID | Step: SEND | Type: Standard/Monitor *
From: billyravid83264@gmail.com | To: orassayag@gmail.com | Email Id: 1 | Account Id: 1 *
API Key: SG-XXXXXXX-XXXXXX-XXXXXX-XXXXXX-XXXXXXX-XXXXXXX *
Subject (Id: 3): "מציעה עצמי לעבודה בחברתכם" | Text (Id: 4): "שלום רב," *
Result: Sent successfully / Error: Email address has been blocked / Limit exceeded | Duplicate | Already sent. *
============ *
-Add Step status of the email object, updated each step (also update on the log). *
-Need check - If any restart occurred, when trying to sent from limit exceeded account, on the first error, mark the account sentCounter = 100. *
 If the limit is exceeded on the first try, subtract 100 from available emails to send, advance the accounts counter, and retry to send the email. *
-When finish - Change the status of the console as relevant - current mode it's on PAUSE. *
-Limit the number of characters of the result in the console status. *
-Fixed bug where 'Available' showed no value. *
-Change all places from unsaved to unsave - And all statuses change without past. *
-Add validation of txt file size to fetch email addresses from. Limit the size - Not too big files *
 (If it's in DIRECTORY mode, skip the file, if it's on FILE mode, throw error). *
-Change the 'sendgridService' (search in all application and change all places) to 'postService', and change all classes names accordingly - Canceled. *
 (like the mongodb is with the name of mongoDatabaseService) - Canceled. *
-Change all post service back to SendGrid Service. *
-Change all "Sendgrid" to "SendGrid". *
-Change all databaseService to mongoDataBaseService. *
-Move EmailAddressStatusKeys to logService. *
-Update packages. *
-Add status console line: *
-Add flag to save in the Mongo database or not. Also add validation that if this flag or the SEND_EMAILS flag are false, throw exception. *
===[SETTINGS] Mode: PRODUCTION | Method: Standard/RandomExceeded | Database: send_production | Drop: false=== *
===[GENERAL] Time: 00.05:16:58 [-] | Current: 100/500 (31.60%) | Available: 493 | Status: SEND/PAUSE/FINISH/EXCEEDED=== *
===[PROCESS1] Total: 1,412 | Pending: 500 | Sent: ✅  100 | Error: ❌ 23 | Exists: 11 | Datebase: 24,235=== *
===[PROCESS2] Saved: 100 | Invalid: 0 | Duplicates: 1 | Filter: 22 | Skip: 12 | Unsave: 2 | Identical Addresses: 0=== *
===[PROCESS3] Monitor Sent: 1 | Security Error: 0 | Security Exists: 0 | Missing Fields: 0 | Invalid Status: 0=== *
===[PROCESS4] Identical Status: 0 | Unexpected Field: 0=== *
===[ACCOUNT] Id: 4 | Username: billyravid83264@gmail.com | Sent: 59/100 (31.60%) | Accounts: 8/10=== *
===[API KEY] SG.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX=== *
===[TEMPLATE] Subject (Id: 3): "מציעה עצמי לעבודה בחברתכם" | Text (Id: 4): "שלום רב,"=== *
===[ATTACHMENT] C:\\Or\\OrWorld\\Billy Ravid Amit\\CV\\12102020\\CV Billy Ravid.doc=== *
===[SEND] Code: 202 | Status: SENT/ERROR/EXISTS/DUPLICATE/FILTER/SKIP/INVALID | step: FINALIZE | From: billyravid83264@gmail.com | To: orassayag@gmail.com | Id: 123 | Type: Standard/Monitor=== *
===[ERROR] Send Error In A Row: 0 | Save Error In a Row: 0=== - Canceled. *
===[RESULT] Sent successfully / Error: Email address has been blocked / Limit exceeded | Duplicate | Already sent=== *
(limit be count of charecters in case of error + on the 'from' and the 'to' fields). *
-Add display fields in method *, email data *, for code (remove from unexpected field validation) * status *, resultDetails *, email type. *
-For the resultDetails build array of results, and display it differently for console and log. *
-(Add flag to save in the Mongo database or not). *
-Add logic for error-in-a-row for specific error codes by SendGrid, exit the program with 'SEND_ERROR_IN_A_ROW'. *
-Add logic for error-in-a-row for save emails to the Mongo database (include the retries) with 'SAVE_ERROR_IN_A_ROW'. *
-Once finished that, build the logic of limit and switch accounts: *
1. Try send email. If limit exceeded reached, go to a function to switch the account. *
2. Detect the specific code of limit exceeded. If this is the code, switch the account. *
3. Retry to send the email after account switched within the external loop. Subtract 1 from the i in the loop. *
(Return 'isRetryEmail' true to the internal loop and do there the logic). *
4. If no accounts left - not enough accounts to send (all accounts with sentCounter = 100) - Exit the program and notify it *
 ("EXIT: LIMIT EXCEEDED"). You will be able to start again tomorrow (if all work as planned). *
 (Add 'LIMIT_EXCEEDED' on the status of the console). *
-Logic for gracefully switch account: (Finalize step). *
1. In any case, advance the account sent emails monitor, regardless to the result status. *
2. When reached the limit - Call the checkAccount function. *
3. If result is false (no accounts left) - Exit the program. *
-Each time account if switched, take the next account. If no accout left, do as previous task. *
-Add logic that if there is an error of limit exceeded - Switch account and retry. *
-Add logic manually to switch accounts when reach 100 email sents. *
-Make the sender to send email addresses by multi SendGrid accounts dynamically. *
-Detect when daily limit is exceeded in a specific SendGrid account and avoid selecting it again. *
-If no available SendGrid account available, exit the program. *
-Add test sent email address js file, to test sending email address - Monitor logic. *
-Build the logic to switch between accounts once the limit exceeded or if some error occurred. *
-For each account there will be daily limit (100 from settings.js) and counter. *
 Once you reached the limit switch the account. *
-Once the account reaches 100 sents, it's automatically switched to the next account (the previous account mark sentCounter = 100). *
-Before each sent email, check if exists in the new table (not sending twice to same email address). *
-Handle errors to switch accounts if needed. *
-If no SendGrid emails counter left to be sent - Throw error and exit. *
-Add logic that if email failed to be saved 2 times in a row (2 different email addresses - *
 from settings.js), throw exception and exit the process *
to switch account / - Canceled. *
-In DEVELOPMENT mode, use external source (from misc folder). *
-In DEVELOPMENT mode, don't really send emails, just do timeout of 1 second (form settings.js). *
-Also, add parameter for delay between each email addresses (no matter what the status is). *
-Delay between each email address sent (from settings.js). *
-Add new table to the Mongo database, of all the email addresses the CV has been sent to. *
-Give a new Mongo database name - sender. *
-Test to see if don't send twice to the same email address. *
-Also, add parameter to the CV file path in the settings.js file - Canceled. *
-Add the save email logic. *
-Each time email is saved, advance the saved count. *
-Check that email that sent will fall on EXISTS status. *
-Add totalPending to count the pending emails to be sent as a static number, and pending as count down number. *
-Add security check - In the sendEmail service add a list of sent emails array. Before each send check that not exists in this array, *
If exists - Mark as SECURITY_ERROR. *
-Add the 'IDENTICAL_STATUS' task. Search ToDo about it: Compare here the statuses. If they are identical, *
 change the email to status of it as 'IDENTICAL_STATUS'. *
-Refactor SendEmailsData - Loop with enum instead declaring all the fields one by one. *
-Add the 'UNEXPECTED_FIELD' task. Search ToDo about it: ToDo: Add new status of 'UNEXPECTED_FIELD' - *
 Check all fields of resultDateTime, resultDetails, resultCode and validate that all of them are null. *
 If not, exit the process and details about it. *
(maximum retries 3 - from settings.js) *
-Clean the sandbox.text.js. *
-Improve enums by convert all enums in the index.js file only. *
-Convert all 'APIKey' to 'apiKey' and 'URLAddress' to 'urlAddress'.
-Each email finish the process / break the process, log it. *
-Add flag to simulate test send with random sent/error with details / send from test list. *
-Report on bug with the SendGrid package on GitHub page. *
-Handle Error of SendGrid. *
-Add limit time to send the email. After 60 seconds (from settings.js), *
 break the process and details about it (copy the logic from the Crawler project). *
-Add SendGrid timeout also. *
-Revert the logic of enums - Need specific places of call direct to the enum, not within the index.js. *
-Refactor all logic - Not the same as the crawler project: *
1. Each service will hold his own data. *
2. The different services will comunicate with each other, to update and fetch relevant data. *
3. Log service will log the console status by fetching data from all services, not from send.logic.js file. *
   The log interval will be handeld inside the service, and will be closed by call from send.logic.js, *
   as the same of the other services when need to exit. *
4. The send.logic.js file will only run the loop, and the interval to update the console status. *
5. This will reduce the amount of code, as each service will update his own data and there will *
   no need to transfer the results and update all data in one place. *
-Start the logic of send emails and the sendEmail service. *
-Each email - Random on title and body (after validation). *
-Add validation on any email address (valid email address) and make sure the from and the to fields are not identical. If so - Mark it as IDENTICAL_ADDRESSES. *
-If one of the fields missing - Mark it as MISSING. *
-Validate the status of the email is PENDING. If not - Mark it as INVALID_STATUS. *
-Before sending email: *
1. Validate all the fields exists. *
2. Make sure the from and the to not identical. *
-Don't copy the testings data on backup + Don't copy the CV on backup. *
-Add flags and options to log sent successfully email addresses and error email addresses (full details about the error) - Canceled. *
-Add id to the emailData instance. *
-Finish random exceeded logic and check it - Verify it works. *
-Vallidate that the skip logic still working - Last time. *
-Validate that the monitor logic is working - Last time. *
-Add id to the account data instance + accountId to each email. *
-Remove BackupType and all logic of it. *
-Remove secondary backup logic. *
-Convert all enums to one file with index.js and replace all places. *
-Merge prepareEmails service and sourceEmailAddresses and rename it to createEmailsService. *
-Add duplicate validation. *
-Vallidate that the skip logic still working. *
-Validate that the monitor logic is working. *
-Add one in each session of sending emails - A monitor email address (from the misc/monitor txt file) - In a *
 random place in the email addresses list send email address to the monitor to verify that the email address sent successfully. *
-Make a file called monitor.txt with all the email addresses that consider to be monitors. *
-Validate all the monitor email addresses + Remove duplicates. No need for any errors or notification about it. *
-Make example file of the monitor.txt file. *
-Add a limit to maximum email addresses to send. Default is 2000, from settings.js. *
 If exceeded, take random email addresses to reach 2000. *
-Change the mode to isRandomExceeded: true - Canceled. *
-Add Unsave/filter/skip statuses on console status bar. *
-Add the skip and the filter (specific email addresses and domains) logics (take from crawler). *
-Start the process of sending emails. *
-Before sending process do basic validation for all email addresses. If invalid - Mark as INVALID. *
-Search for duplicate emails (lowercase). Each duplicate mark as DUPLICATE. *
-Search for exists in the Mongo database. If exists - Mark as EXISTS. *
-It will be in different script: send.script + send.logic.js. *
-Check if the array of email address have at least 1 email address. If not, throw exception. *
-Plan to use random subjects and bodies (template service file). *
-Validate that there at least 1 body and 1 title (from misc/data/email_templates) - Initiate it on the begining of the process. *
-Bring the CV to the misc folder (misc/data/cv) - Validate it exists + is doc file (throw exception if not). *
-Add sentCount to each account (0 is default). *
-Email addresses and SendGrid accounts will be fetched in the initial step from external *
 txt file that will not be backuped (next to it will be example of how the file should look like). *
-Add email addresses service that will return the array of email addresses. *
 If DEVELOPMENT mode, pull from local sources in misc folder / or single file / or array of email addresses. *
-There will be 3 types of sources: *
1. Crawler production path to search directories. (If no files exists throw exception). *
2. Specific txt file (If file not exists throw exception). *
3. Array of email adddresses (If array empty throw exception). *
-In the settings.js, add EMAIL_ADDRESSES_SOURCE_TYPE: DIRECTORY/FILE/ARRAY. *
-If DIRECTORY/FILE, path is needed. Do the validation in the source initiate folder with specific message. *
-With a given path (if not found exception of course): *
-It will search all the such directories. *
-Takes all txt files begin with "email_addresses_" (from settings.js). *
-Scan them and pull out all email address into an array. *
-Add in the settings the monitor email address - Canceled. *
-Add confirmation before begin to run. No details needed, just OK to run? y/n - Canceled. *
(notify it - "Please note: the maximum number of email addresses requested to - Canceled. *
sent excceded the limit (2000), taking random email addresses") - Canceled. *
-Add isActive to each account - Canceled. *
-When finish with the file - Delete it automatically from original destination - Canceled. *
 (only the email addresses txt files, no other log files) - Flag from settings.js - Canceled. *
-In the initiate step: *
-Go to the accounts js file and pull out all the accounts and build array. *
-If not accounts found throw error. *
-Validate all accounts (email addresses + start with SG) (add basic email address validation). *
-Validate for duplicate accounts by email addresses. *
-Create this file is misc/accounts and make sure the specific folder (not all misc, just this) not backuped. *
-In misc folder create a file example structure of accounts. *
-Build array of all accounts with all the details (each on will be registered also in the KeyPass). *
-Add accounts service that will return the accountsData object in the initiate step. *
-Copy the data from long run crawl and change all the email addresses - For testings. *
-Verify in all txt files of source that email addresses are like 'test199@example.com'. *
-In settings, change the comment and add new field to the sent email addresses. *
// Determine the Mongo collection name. *
MONGO_DATABASE_COLLECTION_NAME: 'emailaddresses', *
-Re-implement relevant settings in initiate service. *
-Re-implement relevant settings in the confirmation service. *
-Clean all uneeded files + functions. *
-All while loop that needed convert to for loops. *
-Clear all uneeded packages. *
-Clear INSTRUCTIONS.md and README.md and package.json from all packages. *
-Reload node_modules. *
-Clean uneeded packages + load node_modules again + package.lock.json. *
-Copy this project, rename it to Sender. *
-Check that the backup works. *
-Build a simple send task email, POC, to see if it works as expected. *
-Build POC include switch account in the middle of process. *
-The script will search for a text file path. If not found, throw exception - Canceled. *
-Each send of email address, use random SendGrid account - Canceled. Not need random. *
-Add log of all the email addresses sent successfully, and all the email addresses failed to be sent (with the error details) - Canceled. Not needed. *
-All the new settings: Add title in the settings.js file for the sent email addresses step - Canceled. *
-Copy the structure from the existing crawl logic. - Canceled. *
-Refactor from settings.js: - Canceled. *
-Create new file called send_settings.js (copied from existing settings.js - Clear all parameters from there) - Canceled. *
-Rename the settings.js to crawl_settings - Canceled. *
-Change in all places from settings.js to crawl.js - Canceled. *
-Add different function to initiate all parameters (execute the 2 functions always) - Canceled. *
-Paths: - Canceled. *
-Change the diretory name to Crawler_23_ddmmyyyy_time - Canceled. *
-Create the director name to Send_23_ddmmyyyy_time - Canceled. *
-Implement the logic to send email addresses from this crawler - Canceled. *
-Add switch case and log the error files, also - Canceled. *