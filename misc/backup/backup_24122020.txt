/* IS_LOG_RESULTS,  */
/* 			// Change it to: 			if (isAdd) { this[fieldName] += count; } else { this[fieldName] -= count; }
			//isAdd ? this[fieldName] += count : this[fieldName] -= count; */
            /* //const { exit } = require('../../utils/files/system.utils'); */

            		/* 		if (!applicationService.applicationData.isLogResults) {
					return;
				} */
						/* 		if (!applicationService.applicationData.isLogResults) {
					return;
				} */
/* 		if (!applicationService.applicationData.isLogResults) {
			return;
		} */
/* 	getDisplayStatus(status) {
		return sendEmailService.emailAddressStatusKeys.find(key => EmailAddressStatus[key] === status);
	} */
		//const displayStatus = this.getDisplayStatus(status);
			//status = this.getDisplayStatus(sendEmailService.email.status);
		//const isDate = fileName.indexOf(Placeholder.DATE) > -1;
		 // `${isDate ? fileName.replace(Placeholder.DATE, applicationService.applicationData.logDateTime) : fileName}.txt`
/* 		const available = textUtils.getNumberWithCommas(accountService.accountData.availableSendsCount);
const total = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.totalCount);
const pending = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.pendingCount); */
/* 		const exists = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.existsCount);
		const database = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.databaseCount);
		const save = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.saveCount);
		const invalid = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.invalidCount);
		const duplicate = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.duplicateCount);
		const filter = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.filterCount);
		const skip = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.skipCount);
		const unsave = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.unsaveCount);
		const identicalAddresses = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.identicalAddressesCount);
		const monitorSent = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.monitorSentCount);
		const securityError = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.securityErrorCount);
		const securityExists = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.securityExistsCount);
		const missingField = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.missingFieldCount);
		const invalidStatus = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.invalidStatusCount);
		const identicalStatus = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.identicalStatusCount);
		const unexpectedField = textUtils.getNumberWithCommas(sendEmailService.sendEmailData.unexpectedFieldCount);
		const sendErrorInARowCount = textUtils.getNumberWithCommas(sendgridService.sendErrorInARowCount);
		const saveErrorInARowCount = textUtils.getNumberWithCommas(mongoDatabaseService.saveErrorInARowCount); */


/*     async validateURLs() {
        const urls = [applicationService.applicationData.coursesBaseURL, applicationService.applicationData.udemyBaseURL];
        for (let i = 0; i < urls.length; i++) {
            await this.validateURL(urls[i]);
        }
    } */

/*     isLinkExists(link) {
        return new Promise(resolve => {
            dns.lookup(link, (error) => {
                resolve(error ? false : true);
            });
        }).catch();
    } */

/*     async validateInternetConnection() {
        let isConnected = true;
        try {
            isConnected = await this.isLinkExists(applicationService.applicationData.validationConnectionLink);
        } catch (error) { isConnected = false; }
        if (!isConnected) {
            throw new Error('Internet connection is not available (1000034)');
        }
    } */
    //const dns = require('dns');

    /*     // This method check if a receive target path is accessible.
    isPathAccessible(targetPath) {
        // Verify that the path exists.
        this.isPathExistsError(targetPath);
        // Check if the path is readable.
        const errorRead = fs.accessSync(targetPath, fs.constants.R_OK);
        if (errorRead) {
            throw new Error(`targetPath not readable: ${targetPath} (1000041)`);
        }
        // Check if the path is writable.
        const errorWrite = fs.accessSync(targetPath, fs.constants.W_OK);
        if (errorWrite) {
            throw new Error(`targetPath not writable: ${targetPath} (1000042)`);
        }
    } */

        /*     getFullTime(date) {
            return `${textUtils.addLeadingZero(date.getHours())}:${textUtils.addLeadingZero(date.getMinutes())}:${textUtils.addLeadingZero(date.getSeconds())}`;
        }

        getDateNoSpaces() {
            const date = new Date();
            return [textUtils.addLeadingZero(date.getDate()), (textUtils.addLeadingZero(date.getMonth() + 1)), date.getFullYear()].join('');
        }

        getFullDateNoSpaces() {
            const date = new Date();
            return `${[textUtils.addLeadingZero(date.getDate()), (textUtils.addLeadingZero(date.getMonth() + 1)), date.getFullYear()].join('')}_${[textUtils.addLeadingZero(date.getHours()), textUtils.addLeadingZero(date.getMinutes()), textUtils.addLeadingZero(date.getSeconds())].join('')}`;
        }

        getFullDateTime(date) {
            return `${[textUtils.addLeadingZero(date.getDate()), (textUtils.addLeadingZero(date.getMonth() + 1)), date.getFullYear()].join('/')} ${textUtils.addLeadingZero(date.getHours())}:${textUtils.addLeadingZero(date.getMinutes())}:${textUtils.addLeadingZero(date.getSeconds())}:${textUtils.addLeadingZero(date.getMilliseconds())}`;
        } */


/*             //this.exit('EXIT: ABORTED BY THE USER', Color.RED); */

/*                         //case 'n': resolve(false); break; */

/* EmailAddressStatus,  */